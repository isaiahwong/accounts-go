// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/isaiahwong/auth-go/internal/models"

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// Find provides a mock function with given fields: c, f, opts
func (_m *Repo) Find(c context.Context, f interface{}, opts ...interface{}) ([]*models.User, error) {
	var _ca []interface{}
	_ca = append(_ca, c, f)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...interface{}) []*models.User); ok {
		r0 = rf(c, f, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...interface{}) error); ok {
		r1 = rf(c, f, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: c, f, opts
func (_m *Repo) FindOne(c context.Context, f interface{}, opts ...interface{}) (*models.User, error) {
	var _ca []interface{}
	_ca = append(_ca, c, f)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...interface{}) *models.User); ok {
		r0 = rf(c, f, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...interface{}) error); ok {
		r1 = rf(c, f, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: c, u, id
func (_m *Repo) Save(c context.Context, u *models.User, id string) (string, error) {
	ret := _m.Called(c, u, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, string) string); ok {
		r0 = rf(c, u, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.User, string) error); ok {
		r1 = rf(c, u, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
